{"version":3,"sources":["components/AuthForm.js","components/Toolbar.js","components/ListDocs.js","components/ListUsers.js","components/AddUsers.js","components/Title.js","App.js","index.js"],"names":["AuthForm","props","token","currentUser","onClick","logout","className","type","defaultValue","value","handleRegister","handleLogin","Toolbar","saveContent","messageStatus","ListDocs","listDocs","map","doc","clickTitle","name","id","title","ListUsers","allowedUsers","user","AddUsers","unallowedUsers","allowUser","Title","server","socket","io","App","getDocs","a","allUsers","allowedDocs","console","log","axios","url","method","data","query","then","res","users","forEach","push","email","docs","allowed_users","allowed_user","state","setState","postDatabase","titleInp","post","content","currentContent","updateDatabase","docOwner","clickedDocOwner","docId","clickedDocId","response","status","catch","err","warn","getCurrentInput","innerHTML","titleInput","document","getElementsByClassName","_id","html","emit","on","getCurrentTitle","currentTitle","e","clickedTitle","target","unallowedPersons","includes","save","titleExists","register","preventDefault","mail","password","login","match","get","Users","clickedUser","allowed","index","indexOf","unallowed","splice","this","onChange","theme","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.db520037.chunk.js","sourcesContent":["import React from \"react\";\n\n// SIGNUP AND LOGIN\nconst AuthForm = (props) => {\n    // if token exists, then user is logged in\n    if (props.token) {\n        return (\n            <div>\n                <div>{props.currentUser} is logged in</div>\n                <button onClick={props.logout} >Log out</button>\n            </div>\n\n        )\n    } else {\n        return (\n            <div className=\"AuthForm\">\n                <form>\n                    <label>Email</label>\n                    <input className=\"email\" type=\"email\" defaultValue=\"joki20@student.bth.se\"></input>\n\n                    <label>Password</label>\n                    <input className=\"password\" defaultValue=\"abc123\"></input>\n                    <input\n                        type=\"submit\"\n                        className=\"register\"\n                        value=\"Register\"\n                        onClick={props.handleRegister} />\n                    <input\n                        type=\"submit\"\n                        className=\"login\"\n                        value=\"Login\"\n                        onClick={props.handleLogin}\n                    />\n                </form>\n            </div>\n        )\n    }\n};\n\nexport default AuthForm;","import React from \"react\";\nimport AuthForm from \"./AuthForm.js\";\n\n// TOOLBAR WITH SAVE BUTTON props.children inside\nconst Toolbar = (props) => {\n    return (\n        <div className=\"Toolbar\">\n            <AuthForm\n                // from App.js\n                handleRegister={props.handleRegister}\n                handleLogin={props.handleLogin}\n                token={props.token}\n                currentUser={props.currentUser}\n                logout={props.logout}\n            />\n\n            <button onClick={props.saveContent} >SAVE DOC</button>\n            <div className=\"clickedStatus\">{props.messageStatus}</div>\n        </div>\n    )\n};\n\nexport default Toolbar;\n","import React from 'react';\n\n\n// CURRENT STATE\nconst ListDocs = (props) => {\n  return (\n    <div className=\"ListDocs\">\n      <h2>Documents</h2>\n      <ul>\n        {props.listDocs.map((doc) => (\n          <li onClick={props.clickTitle}\n        key={doc.id}\n        name={doc.id}\n      >{doc.title}</li>\n      ))\n      }\n      </ul>\n    </div>\n  )\n}\n\n  export default ListDocs;","import React from 'react';\n\n// CURRENT STATE\nconst ListUsers = (props) => {\n  let id = 0;\n  return (\n    <div className=\"ListUsers\">\n      <h2>Allowed users</h2>\n      <ul>\n        {props.allowedUsers.map((user) => (\n          <li \n        key={++id}\n      >{user}</li>\n      ))\n      }\n      </ul>\n    </div>\n  )\n}\n\nexport default ListUsers;","import React from 'react';\n\n\n// CURRENT STATE\nconst AddUsers = (props) => {\n  let id = 0;\n  return (\n    <div className=\"AddUsers\">\n    <h2>Add user</h2>\n      <ul>\n      {props.unallowedUsers.map((user) => (\n          <li onClick={props.allowUser}\n        key={++id}\n      >{user}</li>\n      ))\n      }\n      </ul>\n    </div>\n  )\n}\n\nexport default AddUsers;","import React from \"react\";\n\n// TOOLBAR WITH SAVE BUTTON props.children inside\nconst Title = (props) => {\n    return (\n        <div className=\"Title\">\n            <h2>Title</h2>\n            <input className=\"titleInput\" aria-label=\"inputLable\"></input>\n        </div>\n\n    )\n};\n\nexport default Title;","import React from \"react\";\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport Toolbar from \"./components/Toolbar\";\nimport ListDocs from \"./components/ListDocs.js\";\nimport ListUsers from \"./components/ListUsers.js\";\nimport AddUsers from \"./components/AddUsers.js\";\nimport Title from \"./components/Title.js\";\nimport axios from 'axios'; // database requests\nimport './App.css';\nimport 'react-quill/dist/quill.bubble.css';\n// io is a function to call an individual socket\nimport io from \"socket.io-client\";\n\n// let server = `http://localhost:1337`;\nlet server = `https://jsramverk-editor-joki20.azurewebsites.net`\nconst socket = io(\"http://student.bth.se\"); // http://localhost:3000\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // CURRENT STATE\n        this.state = {\n            allUsers: [],\n            allowedDocs: [],\n            allowedUsers: [], // array with objects\n            unallowedUsers: [],\n            currentTitle: '',\n            currentContent: '',\n            messageStatus: '',\n            token: \"\", // if token is set, user is logged in\n            currentUser: \"\",\n            clickedDocId: \"\",\n            clickedDocOwner: \"\",\n        };\n    }\n\n    socketUpdateContent(content) {\n        this.setState({ currentContent: content })\n    }\n\n\n    // fetch('/graphql', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //         'Accept': 'application/json',\n    //     },\n    //     body: JSON.stringify({ query: \"{ courses { name } }\" })\n    // })\n    //     .then(r => r.json())\n    //     .then(data => console.log('data returned:', data));\n        \n\n    getDocs = async () => {\n        let usersArray = [];\n        let allUsers = [];\n        let allowedDocs = [];\n\n        console.log(\"call axios\")\n        await axios({\n            url: `${server}/graphql/`,\n            method: 'post', // use post to get data\n            data: {\n                // if any key is not available in UsersType, error ERR_NAME_NOT_RESOLVED \n                // query the following keys allowed in UsersType\n                query: `\n                {\n                    users {\n                        email\n                        docs {\n                            id\n                            title\n                            content\n                            allowed_users {\n                                email\n                            }\n                        }\n                    }\n                }\n                `\n            }\n        }).then((res) => {\n            usersArray = res.data.data.users; // array with { email:    and    docs: } \n            \n            // for each user...\n            usersArray.forEach((user) => {\n                // collect every created user in database\n                allUsers.push(user.email);\n                // look each associated doc if current logged in user is allowed\n                user.docs.forEach((doc) => {\n                    // users allowed to edit (each user is an object with key 'email') of this doc\n                    doc.allowed_users.forEach((allowed_user) => {\n                        console.log(\"ALLOWED TO EDIT: \")\n                        console.log(allowed_user)\n                        // if user is allowed for this doc, then push doc into allowedDocs array\n                        if (allowed_user.email == this.state.currentUser) {\n                            allowedDocs.push(doc)\n                        }\n                    })\n                })\n            })\n        })\n        await this.setState({ allowedDocs: allowedDocs })\n        await this.setState({ allUsers: allUsers })\n    }\n\n    // MOTSVARIGHET MED GET REQUEST\n    //     await axios.get(`${server}/users`)\n    //         .then(res => {\n    //             let usersArray = res.data.data[0].Users;\n    //             // for each user...\n    //             usersArray.forEach((user) => {\n    //                 // collect every created user in database\n    //                 allUsers.push(user.email);\n    //                 // look each associated doc if current logged in user is allowed\n    //                 user.docs.forEach((doc) => {\n    //                     // go through each allowed user of this doc\n    //                     doc.allowed_users.forEach((allowed_user) => {\n    //                         // if user is allowed for this doc, then push doc into allowedDocs array\n    //                         if (allowed_user.email == this.state.currentUser) {\n    //                             allowedDocs.push(doc)\n    //                         }\n    //                     })\n    //                 })\n    //             })\n    //         })\n    //     await this.setState({ allowedDocs: allowedDocs })\n    //     await this.setState({ allUsers: allUsers })\n    // }\n\n\n// ADJUSTED DB WHERE EACH ALLOWED USER NOW IS AN OBJECT\n// {\n// \t\"_id\": {\n// \t\t\"$oid\": \"61631746cab3d5fde969ba7d\"\n// \t},\n// \t\"Users\": [{\n// \t\t\"email\": \"joki20@student.bth.se\",\n// \t\t\"password\": \"$2a$09$tihtbxPFSSFBOJ7mn20gyuAQYoweN81zVdM3z1odP44drKhgpbi76\",\n// \t\t\"docs\": [{\n// \t\t\t\"id\": \"616315285ebfcb13bacec332\",\n// \t\t\t\"title\": \"Den lille pige med svovlstikkerne\",\n// \t\t\t\"content\": \"<p>Der var engang en liten flikke</p><p><br></p><p>hej</p>\",\n//             \"allowed_users\": [\n//                 {\n//                     \"email\": \"joki20@student.bth.se\"\n//                 },\n//                 {\n//                     \"email\": \"abc@student.bth.se\"\n//                 }\n//             ]\n// \t\t}]\n// \t}, {\n// \t\t\"email\": \"abc@student.bth.se\",\n// \t\t\"password\": \"$2a$09$3mKfFqXD0lgLyOeBKFqk4uzknzu7rr3EzNU/.V9XCervJ7c0A8Mei\",\n// \t\t\"docs\": []\n// \t}, {\n// \t\t\"email\": \"johan@student.bth.se\",\n// \t\t\"password\": \"$2a$09$ik.zN7Egd7g2bKe4nj4GZu3BsrOA7I.Y.UnToHLKuJyunHHsl7Sfu\",\n// \t\t\"docs\": []\n// \t}]\n// }\n            \n            \n\n    // // MOUNT DATABASE DATA\n    // async componentDidMount() {\n    //     await this.getDatabase()\n    // }\n\n    postDatabase = (titleInp) => {\n        // post as query /create?title=titel&content=text\n        axios.post(`${server}/create`, {\n            email: this.state.currentUser,\n            title: titleInp,\n            content: this.state.currentContent\n        })\n\n        this.getDocs();\n    }\n\n    updateDatabase = async () => {\n        await axios.post(`${server}/update/`, {\n            docOwner: this.state.clickedDocOwner,\n            docId: this.state.clickedDocId,\n            content: this.state.currentContent\n        })\n            .then(response => response.status)\n            .catch(err => console.warn(err));\n    }\n\n    // SETSTATE: arrow function will prevent 'this.setState is not a function\n    getCurrentInput = (innerHTML) => {\n        this.setState({ currentContent: innerHTML });\n\n        // get title input and look for match in order get correct id\n        var titleInput = document.getElementsByClassName(\"titleInput\")[0].value;\n        var id = null;\n\n        this.state.allowedDocs.forEach((doc) => {\n            if (doc.title === titleInput) {\n                id = doc._id;\n            }\n        })\n            \n        // emit object with id and content to backend in order to create room\n        let doc = {\n            _id: id,\n            html: this.state.currentContent\n        }\n        socket.emit(\"create\", doc)\n\n        // received from server to all clients, containing data.html\n        socket.on(\"doc\", (data) => {\n            this.setState({ currentContent: data.html })\n        });\n    }\n\n    getCurrentTitle = (innerHTML) => {\n        this.setState({ currentTitle: innerHTML });\n    }\n\n    clickTitle = async (e) => {\n        let clickedTitle = e.target.innerHTML; // get title from click\n        let allowedUsers = [];\n        let unallowedPersons = [];\n        console.log(\"CLICKED TITLE\")\n        console.log(e)\n        \n        //await meaning finish this before next await\n        await this.state.allowedDocs.forEach((doc) => {\n            // if match is found in db\n            if (doc.title === clickedTitle) {\n                console.log(doc)\n                document.getElementsByClassName(\"titleInput\")[0].value = doc.title;\n                // setState title and content\n                this.setState({ currentTitle: doc.title })\n                this.setState({ currentContent: doc.content })\n\n                doc.allowed_users.forEach((allowed_user) => {\n                    allowedUsers.push(allowed_user.email);\n                })\n                console.log(\"RAD 150\")\n                console.log(allowedUsers)\n                this.setState({ allowedUsers: allowedUsers }) // array with emails\n                this.setState({ clickedDocId: doc.id })\n                this.setState({ clickedDocOwner: doc.allowed_users[0] }) // first person in allowed_users always owns document\n            }\n        })\n\n        // if user is not allowed, add to list of unallowed users\n        await this.state.allUsers.forEach((user) => {\n            if (!this.state.allowedUsers.includes(user)) {\n                unallowedPersons.push(user);\n            }\n        })\n        this.setState({ unallowedUsers: unallowedPersons })\n    }\n\n    \n    save = async () => {\n        let titleExists = \"no\";\n\n        if (this.state.token == \"\") {\n            return this.setState({ messageStatus: \"You must be logged in\" });\n        }\n        // get text of title input\n        var titleInput = document.getElementsByClassName(\"titleInput\")[0].value;\n        var id = null;\n\n        if (!titleInput) {\n            return this.setState({ messageStatus: \"You must provide a title\" });\n        }\n        \n        // forEach((element) => { ... } )\n        this.state.allowedDocs.forEach((doc) => {\n            // check for match, and if so do an update\n            if (doc.title === titleInput) {\n                this.setState({ clickedDocId: doc.id });\n                // owner is always first in array_users\n                this.setState({ clickedDocOwner: doc.allowed_users[0].name })\n\n                this.setState({ messageStatus: \"Title content updated\" });\n                titleExists = \"yes\";\n                id = doc.id;\n                this.updateDatabase()\n            }\n        }) // stop loop\n\n        // IF TITLE DOESN'T EXIST\n        if (titleExists === \"no\") {\n            console.log(\"Title doesn't exist\")\n            this.setState({ messageStatus: \"New entry created\" });\n            await this.postDatabase(titleInput);\n        }\n    }\n\n    register = async (e) => {\n        e.preventDefault();\n\n        let mail = document.getElementsByClassName(\"email\")[0].value;\n        let password = document.getElementsByClassName(\"password\")[0].value;\n\n        // register user\n        await axios.post(`${server}/register`, {\n            email: mail,\n            password: password\n        })\n        \n        document.getElementsByClassName(\"email\")[0].value = '';\n        document.getElementsByClassName(\"password\")[0].value = '';\n        return this.setState({ messageStatus: `${mail} was added, try to login` });\n\n        console.log(\"register\")\n    }\n\n    login = async (e) => {\n        e.preventDefault();\n        let mail = document.getElementsByClassName(\"email\")[0].value\n        let password = document.getElementsByClassName(\"password\")[0].value\n        let match = 'no';\n\n        this.setState({ currentUser: mail })\n\n            // if no email or password, exit function\n        if (!mail || !password) {\n            return this.setState({ messageStatus: \"Email or password missing\" });\n        }\n\n        await axios.get(`${server}/users`)\n            .then(res => {\n                // get array of users\n                let usersArray = res.data.data[0].Users\n                // check if user exists\n                usersArray.forEach((user) => {\n                    console.log(user.email)\n                    if (user.email === mail) {\n                        match = \"yes\"\n                    }\n                })\n            })\n\n            // if not, show message\n            if (match === \"no\") {\n                this.setState({ messageStatus: \"Sorry, but email doesn't exist\" });\n            }\n            // if match, send emaeil and password to backend and create JWT\n            if (match === \"yes\") {\n                console.log(\"matching email was found\")\n                // send email and password to backend, process login and return JWT\n                await axios.post(`${server}/login`, {\n                    email: mail,\n                    password: password\n                })\n                // if successful login response containsjwt, oherwise undefined\n                    .then(res => {\n                        let gotToken = res.data.data\n\n                        if (gotToken) {\n                            this.setState({ token: res.data.data })                            \n                        }\n                })\n                .catch(err => console.warn(err));\n            }\n        // setState to update array\n        this.getDocs()\n\n        this.setState({ messageStatus: '' })\n    }\n\n    logout = async () => {\n        this.setState({ currentUser: \"\" })\n        this.setState({ token: \"\" })\n        this.setState({ allowedDocs: [] })\n        this.setState({ allowedUsers: [] })\n        this.setState({ unallowedPersons: [] })\n        this.setState({ currentTitle: '' })\n        this.setState({ currentContent: '' })\n        document.getElementsByClassName(\"titleInput\")[0].value = ''\n    }\n\n    allowUser = async (e) => {\n        e.preventDefault();\n        let clickedUser = e.target.innerHTML;\n        console.log(\"clicked user to remove:\")\n        console.log(clickedUser)\n\n\n        // function for adding user to allowed_users for this doc\n        await axios.post(`${server}/allow_user`, {\n            email: clickedUser,\n            currentUser: this.state.currentUser,\n            docId: this.state.clickedDocId\n        })\n\n        // allow user in frontend\n        let allowed = this.state.allowedUsers;\n\n        allowed.push(clickedUser);\n        this.setState({ allowedUsers: allowed })\n\n        // delete user from unallowedUsers in frontend\n        const index = this.state.unallowedUsers.indexOf(clickedUser);\n        let unallowed = this.state.unallowedUsers;\n        // remove user\n        unallowed.splice(index, 1);\n        this.setState({ unallowedUsers: unallowed})\n\n        return this.setState({ messageStatus: `${clickedUser} is now allowed to edit this document` });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Toolbar\n                    saveContent={this.save}\n                    messageStatus={this.state.messageStatus}\n                    // functions for register and login\n                    handleRegister={this.register}\n                    handleLogin={this.login}\n                    token={this.state.token} // if exists, will show AuthForm\n                    currentUser={this.state.currentUser}\n                    logout={this.logout}\n                />\n                <Title onChange={this.getCurrentTitle} />\n                <ListDocs listDocs={this.state.allowedDocs} clickTitle={this.clickTitle} />\n                <ListUsers allowedUsers={this.state.allowedUsers} />\n                <AddUsers allUsers={this.state.allUsers} unallowedUsers={this.state.unallowedUsers} allowUser={this.allowUser} />\n                <ReactQuill\n                    className=\"Quill\"\n                    theme=\"snow\"\n                    value={this.state.currentContent}\n                    onChange={this.getCurrentInput}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}